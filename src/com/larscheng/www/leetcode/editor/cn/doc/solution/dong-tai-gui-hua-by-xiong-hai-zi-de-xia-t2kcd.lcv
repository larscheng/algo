> Problem: [55. 跳跃游戏](https://leetcode.cn/problems/jump-game/description/)

[TOC]

# 思路

> 发现上一个状态可以推断出下一个状态，所以用dp。dp[i]表示下标为i处的位置可以跳的最远距离

# 解题方法

> 公式为dp[i] = Math.max(dp[i-1]-1,nums[i])，当前i位置能跳的最大距离为（上个位置能跳的最大距离-1,当前i位置的值）其中的最大值。
> 当dp[i]为0时，代表两者都为0，跳不动了，直接返回false。如果循环执行完了代表能跳完整个nums，返回true。

# 复杂度

> 时间复杂度:
> $O(n)$

# Code

* []

```Java
class Solution {
    public static boolean canJump(int[] nums) {
        int[] dp = new int[nums.length];
        for (int i = 1; i < dp.length; i++) {
            dp[i] = 0;
        }
        dp[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (dp[i-1]==0){
                return false;
            }
            dp[i] = Math.max(dp[i-1]-1,nums[i]);
        }
        return true;
    }
}
```

