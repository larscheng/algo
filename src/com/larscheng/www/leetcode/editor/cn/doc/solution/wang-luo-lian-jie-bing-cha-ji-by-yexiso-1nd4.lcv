### 前言

很简单，题目需要用到网络的连通性，没错，并查集。

如果您对【并查集】相关知识还不是太了解，可以看看我之前的题解[【详解并查集】](https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column/solution/tu-jie-bing-cha-ji-by-yexiso-nbcz/)

有问题欢迎留言交流！

### 解题思路

分析题意，**需要将所有网络连接成同一个网络。**

假设最后形成了`n`个网络，说明存在`n`个连通分量，要将`n`个连通分量合并，很明显至少需要`n-1`个网络连接线。

那么，这`n-1`根网络连接线从哪来呢，只有从各个网络中多余的连接线拔过来。

所以在遍历`Connections`数组时，需要记录有多少根多余的网络连接线。

### 步骤

> 1. 存在`n`个计算机，所以最开始建立`n`个连通分量，每个网络计算机是一个连通分量
> 2. 遍历`Connections`数组，将相应的网络计算机（连通分量）合并成同一个网络
>    合并时，作以下判断：
>    如果两个连通分量不同源（根节点不相同），合并；
>    如果两个连通分量同源（根节点相同），说明该连接多余，则将多余的连接线数量+1
> 3. 最后可以计算得出网络中要多少个连通分量，假设有`n`个。要将`n`个连通分量连接到一起，至少需要`n-1`根多余的网络连接线

### 举例

![image.png](https://pic.leetcode-cn.com/1611366638-Ikarxc-image.png)

### 代码

使用封装好的并查集代码，轻而易举地完成代码。

* cpp

```cpp
// 注意：使用该代码，并不能使得所有的元素都直接指向根节点，仍然存在间接的指向
class Djset {
private:
    vector<int> parent;  // 记录节点的根
    vector<int> rank;  // 记录根节点的深度（用于优化）
    int count;         // 记录连通分量的个数
    int rest;          // 记录多余的连接数
public:
    Djset(int n): parent(vector<int>(n)), rank(vector<int>(n)), count(n), rest(0) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        // 压缩方式：直接指向根节点
        if (x != parent[x]) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void merge(int x, int y) {
        int rootx = find(x);
        int rooty = find(y);
        if (rootx != rooty) {
            // 按秩合并
            if (rank[rootx] < rank[rooty]) {
                swap(rootx, rooty);
            }
            parent[rooty] = rootx;
            if (rank[rootx] == rank[rooty]) rank[rootx] += 1;
            count--;
        } else {
            rest++;
        }
    }
    int getCount() {
        return count;
    }
    int getRest() {
        return rest;
    }
};

class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        Djset ds(n);
        for (auto& e :connections) {
            ds.merge(e[0], e[1]);
        }
        if (ds.getRest() < ds.getCount() - 1) return -1;
        return ds.getCount() - 1;
    }
};
```

### 结果

![image.png](https://pic.leetcode-cn.com/1611365232-DztDlp-image.png)

在并查集的基础上，添加一些辅助变量，便可以使用在不同的场景

> - 添加`count`变量保存连通分量的数量
>   如题目 [【岛屿数量】](https://leetcode-cn.com/problems/number-of-islands/)[【省份数量】](https://leetcode-cn.com/problems/number-of-provinces/)
> - 添加`size`数组保存每个连通分量中的节点个数，可解决连通图的合并与拆分类问题
>   如题目 [【打砖块】](https://leetcode-cn.com/problems/bricks-falling-when-hit/solution/bing-cha-ji-by-yexiso-cp6z/)
> - 添加`len`数组保存每个连通分量中的边权值和，可解决最小生成树问题（Kruskal算法）
>   如 计算图的最小生成树[【连接所有点的最小费用】](https://leetcode-cn.com/problems/min-cost-to-connect-all-points/solution/prim-and-kruskal-by-yexiso-c500/)
>   ![image.png](https://pic.leetcode-cn.com/1611377592-MxAKbI-image.png)
> - 有时也需要保存并查集中的连通分量的根节点，可添加`map`进行辅助

并查集的适用方式层出不穷，适用场景也多种多样，我们要善于发现其中隐藏的key point。
