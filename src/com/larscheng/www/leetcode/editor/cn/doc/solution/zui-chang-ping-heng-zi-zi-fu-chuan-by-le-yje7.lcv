#### 方法一：计数

**思路**

题目要求我们找到一个长度为偶数的最长的子字符串，这个子字符串前一半都为 $\text{`0'}$，后一半都为 $\text{`1'}$。我们可以遍历字符串，用一个长度为 $2$ 的数组 $\textit{count}$ 记录下来遇到的连续的 $\text{`0'}$ 的个数和连续的 $\text{`1'}$ 的个数，并不断更新，更新规则如下：
* 如果遇到的为 $\text{`0'}$：
  * 如果遇到的这个 $\text{`0'}$ 是一个全 $\text{`0'}$ 子字符串的第一个 $\text{`0'}$（即是 $s$ 的第一个字符或者这个 $\text{`0'}$ 前面的字符是 $\text{`1'}$），则把 $\textit{count}[0]$ 记为 $1$，把 $\textit{count}[1]$ 记为 $0$。
  * 否则的话，只更新 $\textit{count}[0]$，将其自增 $1$。
* 如果遇到的为 $\text{`1'}$，只需要将 $\textit{count}[1]$ 自增 $1$，不需要改变 $\textit{count}[0]$ 的值。并且，此时的 $\text{`0'}$ 是一个平衡字符串的结尾，只需通过计算 $2 \times \min(\textit{count}[0], \textit{count}[1])$ 来计算这个平衡字符串的长度。

遍历时，不停更新平衡字符串的最大长度即可。

**代码**

* [sol1-Python3]

```Python
class Solution:
    def findTheLongestBalancedSubstring(self, s: str) -> int:
        res = 0
        n = len(s)
        count = [0, 0]
        for i in range(n):
            if s[i] == '1':
                count[1] += 1
                res = max(res, 2 * min(count))
            elif i == 0 or s[i-1] == '1':
                count[0] = 1
                count[1] = 0
            else:
                count[0] += 1
        return res
```

* [sol1-Java]

```Java
class Solution {
    public int findTheLongestBalancedSubstring(String s) {
        int res = 0;
        int n = s.length();
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count[1]++;
                res = Math.max(res, 2 * Math.min(count[0], count[1]));
            } else if (i == 0 || s.charAt(i - 1) == '1') {
                count[0] = 1;
                count[1] = 0;
            } else {
                count[0]++;
            }
        }
        return res;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int FindTheLongestBalancedSubstring(string s) {
        int res = 0;
        int n = s.Length;
        int[] count = new int[2];
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                count[1]++;
                res = Math.Max(res, 2 * Math.Min(count[0], count[1]));
            } else if (i == 0 || s[i - 1] == '1') {
                count[0] = 1;
                count[1] = 0;
            } else {
                count[0]++;
            }
        }
        return res;
    }
}
```

* [sol1-C++]

```C++
class Solution {
public:
    int findTheLongestBalancedSubstring(string s) {
        int res = 0, n = s.size();
        vector<int> count(2);
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                count[1]++;
                res = max(res, 2 * min(count[0], count[1]));
            } else if (i == 0 || s[i - 1] == '1') {
                count[0] = 1;
                count[1] = 0;
            } else {
                count[0]++;
            }
        }
        return res;            
    }
};
```

* [sol1-C]

```C
int findTheLongestBalancedSubstring(char * s) {
    int res = 0;
    int count[2] = {0};
    for (int i = 0; s[i] != '\0'; i++) {
        if (s[i] == '1') {
            count[1]++;
            res = fmax(res, 2 * fmin(count[0], count[1]));
        } else if (i == 0 || s[i - 1] == '1') {
            count[0] = 1;
            count[1] = 0;
        } else {
            count[0]++;
        }
    }
    return res;    
}
```

* [sol1-Go]

```Go
func findTheLongestBalancedSubstring(s string) int {
    res := 0
    count := make([]int, 2)
    for i := 0; i < len(s); i++ {
        if s[i] == '1' {
            count[1]++
            res = max(res, 2 * min(count[0], count[1]))
        } else if i == 0 || s[i - 1] == '1' {
            count[0], count[1] = 1, 0
        } else {
            count[0]++
        }
    }
    return res   
}
```

* [sol1-JavaScript]

```JavaScript
var findTheLongestBalancedSubstring = function(s) {
    let res = 0;
    const count = new Array(2).fill(0);
    for (let i = 0; i < s.length; i++) {
        if (s[i] == '1') {
            count[1]++;
            res = Math.max(res, 2 * Math.min(count[0], count[1]));
        } else if (i == 0 || s[i - 1] == '1') {
            count[0] = 1;
            count[1] = 0;
        } else {
            count[0]++;
        }
    }
    return res;
};
```

**复杂度分析**

- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度，仅需要遍历一次字符串。

- 空间复杂度：$O(1)$。仅需要常数空间。

