> Problem: [30. 串联所有单词的子串](https://leetcode.cn/problems/substring-with-concatenation-of-all-words/description/)

[TOC]

# 思路

先弄懂`串联`的意思，就是`words`中所有单词的一个排列，然后就看这个**串联**在`s`中的索引位置。

直观的暴力解法是把`words`的排列穷举出来，然后再看每个排列在`s`中的索引，这显然会TLE的，`words`较长，枚举排列很耗时的，每次枚举结果还要在`s`中搜索引。

其实这是一个滑动窗口的问题，从前往后在`s`中滑动一个长度为`words`单词长度之和的窗口，就看这个窗口是否是`words`中单词的一个排列就可以了。

所以，这个问题的关键在于如何高效的判断**一坨字符串**是否是**一坨单词的一个排列**。

# 解题方法

计输入字符串`s`长度为$n$，列表`words`长度为$m$，每个单词长度为$L$。那么，滑动窗口的长度就是$m \times L$。

那么，显然当$n \lt m \times L$时是无解的。

如何判断滑动窗口，是否是一个排列：
1. 用哈希表统计`words`中的单词频次
2. 在滑动窗口里面，从前往后以长度为$L$来看是否在频次表里，如果不在，说明不匹配。如果在，则把频次减$1$。
3. 如果一个窗口里面把单词都遍历完了，就说明是匹配的，可以把这个索引$i$记录到答案列表里面。

# 复杂度

时间复杂度: $O(n \times m \times L)$

空间复杂度: $O(n \times m \times L)$

# Code

* []

```Java
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        int n = s.length();
        int m = words.length;
        int L = words[0].length();
        if (n < m * L) {
            return List.of();
        }
        
        Map<String, Integer> map = new HashMap<>();
        for (String w : words) {
            int c = map.getOrDefault(w, 0) + 1;
            map.put(w, c);
        }

        List<Integer> res = new ArrayList<>();
        for (int i = 0; i <= n - m*L; i++) {
            HashMap<String, Integer> wordCount = new HashMap(map);
            boolean pass = true;
            for (int j = 0; j < m; j++) {
                int idx = i + j * L;
                String w = s.substring(idx, idx + L);
                if (wordCount.getOrDefault(w, 0) == 0) {
                    pass = false;
                    break;
                } else {
                    wordCount.put(w, wordCount.get(w) - 1);
                }
            }
            if (pass) {
                res.add(i);
            }
        }
        return res;
    }
}
```

