> 欢迎大家关注我的LeetCode代码仓库：[https://github.com/yanglr/leetcode-ac](https://github.com/yanglr/leetcode-ac),
>
> 所有代码(含有各种主流语言及Shell、SQL等)已上传到此仓库。
>
> 目前已完成的**450道**题都有完整版C++代码。

### 几乎所有题目都会追求一题多解和最优解法，真诚求star！

![image.png](https://pic.leetcode-cn.com/1633139251-BUkcUv-image.png)

## 解题思路

题目中明确指出了: **不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法**, 那么求幂次方的pow函数等也是不能用的。那么我们只能自食其力, 一点一点实现了。

<br> </br>

**对于单个bit位的数:**
数字0~9对应字符 '0'~'9', 而10~15对应的字符是 'a'~'f', 可以用`哈希表`或`数组`存这个信息，本人更喜欢用哈希表一点, 其实还可以直接用1个字符串模拟一个"哈希表"。

### 如果输入的数是正数, 怎么解决此题?

如果输入的数是整数, 比较容易解决, 相信挺多小伙伴已经解决过(十进制) **正整数** 转二进制的问题, 方法基本一致。

直接通过迭代%16, /16的方法解决。

### 如果输入的数是负数, 怎么办?

当输入数是负数时, 其补码的数字范围就是0到UINT_MAX(2^31-1)。
我们需要找一种方法将其转为正数, 且不影响补码间的计算。
这样也可以直接复用正数的迭代方法进行计算。

***

一种可行的方法是:

* 

```
N = N + 2^32 (2^32的16进制表示为 0x100000000)。
```

***

用代码表示是:

* cpp

```cpp
if (N < 0) N = N + 0x100000000;
```

***

或这样理解:
表示负数“-k”的方式是使用 (2^n-k) 代替, 其中k>0。

* cpp

```cpp
if (N < 0) N = 0x100000000 - (-N);
```

**需要注意的是**: Java中不能使用`0x100000000`, 而需要写成`4294967296L`, 否则部分test case会因为大整数溢出而无法通过。因为4294967296L就是 0x0000000100000000(16^8=2^32), 但Java中不使用BigInteger时无法存储该值。

<br> </br>

### 如果输入是大整数, 怎么办?

迭代过程中使用long (甚至long long)解决

<br> </br>

### 已 AC的 代码

目前已实现 C++、Python、Java、C#, 欢迎补充~

感谢 评论区小伙伴[@qizhenkang](/u/qizhenkang/)贡献的Python版本👍

* []

```C++
class Solution {
public:
    string toHex(int num) {
        string res;
        long N = num;     // 预处理: 将精度提升到int64, 防止大整数溢出
        if (N == 0) return "0";
        unordered_map<int, char> dict;
        dict = {
                {0, '0'},
                {1, '1'},
                {2, '2'},
                {3, '3'},
                {4, '4'},
                {5, '5'},
                {6, '6'},
                {7, '7'},
                {8, '8'},
                {9, '9'},
                {10, 'a'},
                {11, 'b'},
                {12, 'c'},
                {13, 'd'},
                {14, 'e'},
                {15, 'f'}
            };
        if (N < 0) N = N + 0x100000000; /* 负数的补码: 其数字范围就是0到UINT_MAX(2^31-1), 即为16^8-1。这里+ 0x100000000是为了将任意一个负数转换到正数范围内(且不影响计算结果), 理论上±2^32均可, 但我们后面的迭代需要是正数, 于是选择+0x100000000。 */
        while (N > 0)
        {
            long lastDigit = N % 16;
            N /= 16;
            res = dict[lastDigit] + res;
        }
        return res;
    }
};
```

* []

```C#
public class Solution {
    public string ToHex(int num) {
        string res = string.Empty;
        long N = num;     // 预处理: 将精度提升到int64, 防止大整数溢出
        if (N == 0) return "0";
        Dictionary<long, char> dict = new Dictionary<long, char>
        {
            {0, '0'},
            {1, '1'},
            {2, '2'},
            {3, '3'},
            {4, '4'},
            {5, '5'},
            {6, '6'},
            {7, '7'},
            {8, '8'},
            {9, '9'},
            {10, 'a'},
            {11, 'b'},
            {12, 'c'},
            {13, 'd'},
            {14, 'e'},
            {15, 'f'}
        };
        if (N < 0) N = N + 0x100000000;
        while (N > 0)
        {
            long lastDigit = N % 16;
            N /= 16;
            res = dict[lastDigit] + res;
        }
        return res;        
    }
}
```

* []

```Python
class Solution:
    def toHex(self, num: int) -> str:
        result = ''
        hexDict = {0:'0',1:'1',2:'2',3:'3',4:'4',5:'5',6:'6',7:'7',8:'8',9:'9',10:'a',11:'b',12:'c',13:'d',14:'e',15:'f'}
        if num == 0:
            return '0'
        if num < 0:
            num = 16**8 + num
        while num > 0:
            result = hexDict[num % 16] + result
            num //= 16

        return result
```

* []

```Java
class Solution {
    public String toHex(int num) {
        String res = "";
        long N = num;     // 预处理
        if (N == 0) return "0";
        HashMap<Integer, Character> dict = new HashMap<Integer, Character>()
        {{
            put(0, '0');
            put(1, '1');
            put(2, '2');
            put(3, '3');
            put(4, '4');
            put(5, '5');
            put(6, '6');
            put(7, '7');
            put(8, '8');
            put(9, '9');
            put(10, 'a');
            put(11, 'b');
            put(12, 'c');
            put(13, 'd');
            put(14, 'e');
            put(15, 'f');
        }};
        if (N < 0)  N = 4294967296L + N;  /* 4294967296L就是 0x0000000100000000(16^8=2^32), Java中不使用BigInteger无法存储这个数, 只能hard code在这里了 */
        while (N > 0)
        {
            long lastDigit = N % 16;
            N /= 16;
            res = dict.get((int)lastDigit) + res;
        }
        return res;             
    }
}
```

#### 运行结果:

![image.png](https://pic.leetcode-cn.com/1633139275-NZdkGq-image.png)

执行用时：**0 ms**, 在所有 C++ 提交中击败了 **100.00%** 的用户
内存消耗：5.8 MB, 在所有 C++ 提交中击败了 **66.73%** 的用户

<br />

### C++/C#/Java 代码简化

用1个字符串模拟一个"哈希表", 这样代码可以缩减不少行。

* []

```C++
class Solution {
public:
    string toHex(int num) {
        string res;
        long N = num; 
        if (N == 0) return "0";
        string dict = "0123456789abcdef";
        if (N < 0) N = N + 0x100000000; 
        while (N > 0)
        {
            long lastDigit = N % 16;
            N /= 16;
            res = dict[lastDigit] + res;
        }
        return res;
    }
};
```

* []

```C#
public class Solution {
    public string ToHex(int num) {
        string res = string.Empty;
        long N = num;     // 预处理: 将精度提升到int64, 防止大整数溢出
        if (N == 0) return "0";
        string dict = "0123456789abcdef";        
        if (N < 0) N = N + 0x100000000;
        while (N > 0)
        {
            long lastDigit = N % 16;
            N /= 16;
            res = dict[(int)lastDigit] + res;
        }
        return res;        
    }
}
```

* []

```Java
class Solution {
    public String toHex(int num) {
        String res = "";
        long N = num;     // 预处理
        if (N == 0) return "0";
        String dict = "0123456789abcdef";
        if (N < 0) N = 4294967296L + N;  /* 4294967296L就是 0x0000000100000000(16^8=2^32), Java中不使用BigInteger无法存储, 只能hard code在这里了 */
        while (N > 0)
        {
            long lastDigit = N % 16;
            N /= 16;
            res = dict.charAt((int)lastDigit) + res;
        }
        return res;             
    }
}
```

#### 运行结果:

![image.png](https://pic.leetcode-cn.com/1633146891-ZdMRVb-image.png)

时间复杂度还是击败100%哈~

<br />

大家好，我是**极客学长**，点击[我的头像](https://github.com/yanglr/leetcode-ac)，查看力扣详细刷题攻略，你会发现相见恨晚！

**如果感觉题解对你有帮助，不要吝啬给一个👍吧！**

<br />

好了，**AC一时爽，一直AC一直爽**！

<br />

本人公众号 [大白技术控](https://mp.weixin.qq.com/s/d8RvIYtPOeGM2UOoP0xGkg), 2万读者。

知乎 [Bravo Yeung](https://www.zhihu.com/people/legege007), 4.5万读者。

B站 [极客学长呀](https://space.bilibili.com/1443957), 后续会用视频的形式来带大家刷LeetCode题，欢迎点个关注，敬请期待~

<br />

更多清晰易懂的代码 (C++/Java/C#/Python/Go) 的 LeetCode 题解，会在我的 github 仓库 [https://github.com/yanglr/leetcode-ac](https://github.com/yanglr/leetcode-ac)中持续更新, 欢迎小伙伴们 star/fork，如果有不错的解法也欢迎提PR。

**ps:** 仓库的代码中可以直接拿来本地调试喔，框架已搭好，根据自己的需求调整 test case即可~

<br />

**参考:**
Two's Complement (cornell.edu)
<https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html>

Positive and Negative Two Complement Numbers
<https://www.cs.nmsu.edu/~hdp/cs273/notes/neg.html>
