## 朴素解法

但凡是从有序序列中找某个数，我们第一反应应该是「二分」。

这道题是一个原本有序的数组在某个点上进行了旋转，其实就是将原本一段升序的数组分为了两段。

我们可以先找到旋转点 `idx`，然后对 `idx` 前后进行「二分」。

代码：

* []

```Java
class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int idx = 0;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                idx = i;
                break;
            }
        }
        int ans = find(nums, 0, idx, target);
        if (ans != -1) return ans;
        if (idx + 1 < n) ans = find(nums, idx + 1, n - 1, target);
        return ans;
    }
    int find(int[] nums, int l, int r, int target) {
        while (l < r) {
            int mid = l + r >> 1;
            if (nums[mid] >= target) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return nums[l] == target ? l : -1;
    }
}
```

* 时间复杂度：先对数组进行一次遍历，找到 `idx`，复杂度为 $O(n)$，对 `idx` 前后进行二分查找，复杂度为 $O(\log{n})$。整体为 $O(n)$
* 空间复杂度：$O(1)$

---

## 二分解法

不难发现，虽然在朴素解法中我们应用了「二分」查找。

但理论复杂度为 $O(n)$，实际复杂度也远达不到 $O(\log{n})$，执行效率取决于旋转点 `idx` 所在数组的下标位置。

那么我们如何实现 $O(\log{n})$ 的解法呢？

这道题其实是要我们明确「二分」的本质是什么。

「二分」不是单纯指从有序数组中快速找某个数，这只是「二分」的一个应用。

**「二分」的本质是两段性，并非单调性。只要一段满足某个性质，另外一段不满足某个性质，就可以用「二分」。**

经过旋转的数组，显然前半段满足 `>= nums[0]`，而后半段不满足 `>= nums[0]`。我们可以以此作为依据，通过「二分」找到旋转点。

![0.png](https://pic.leetcode-cn.com/1611652146-DwiKES-0.png)

找到旋转点之后，再通过比较 `target` 和 `nums[0]` 的大小，确定 `target` 落在旋转点的左边还是右边。

**代码（ 感谢 [@🍭可乐可乐吗QAQ](/u/littletime_cc/) 提供的 c++ 版本）：**

* []

```Java
class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        if (n == 0) return -1;
        if (n == 1) return nums[0] == target ? 0 : -1;

        // 第一次「二分」：从中间开始找，找到满足 >=nums[0] 的分割点（旋转点）
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = l + r + 1 >> 1;
            if (nums[mid] >= nums[0]) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }

        // 第二次「二分」：通过和 nums[0] 进行比较，得知 target 是在旋转点的左边还是右边
        if (target >= nums[0]) {
            l = 0;
        } else {
            l = l + 1;
            r = n - 1;
        }
        while (l < r) {
            int mid = l + r >> 1;
            if (nums[mid] >= target) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }

        return nums[r] == target ? r : -1;
    }
}
```

* []

```C++
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n - 1;
        while(l < r){
            int mid = l + r + 1 >> 1;
            if(nums[mid] >= nums[0]){
                l = mid;
            }
            else r = mid - 1;
        }
        if(target >= nums[0]){
            l = 0;
        }
        else{
            l = l + 1;
            r = n - 1;
        }
        while(l < r){
            int mid = l + r >> 1;
            if(nums[mid] >= target){
                r = mid;
            }
            else l = mid + 1;
        }
        return (nums[r] == target ? r : -1);
    }
};
```

* 时间复杂度：$O(\log{n})$
* 空间复杂度：$O(1)$

***

## 其他「二分」相关题解

* 二分模板
  [29. 两数相除](https://leetcode-cn.com/problems/divide-two-integers/) : [二分 + 倍增乘法解法（含模板）](https://leetcode-cn.com/problems/divide-two-integers/solution/shua-chuan-lc-er-fen-bei-zeng-cheng-fa-j-m73b/)

* 二分本质 & 恢复二段性处理

  [33. 搜索旋转排序数组（找目标值）](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/) : [严格 O(logN)，一起看清二分的本质](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/shua-chuan-lc-yan-ge-ologn100yi-qi-kan-q-xifo/)

  [81. 搜索旋转排序数组 II（找目标值）](https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/) : [详解为何元素相同会导致 O(n)，一起看清二分的本质](https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/solution/gong-shui-san-xie-xiang-jie-wei-he-yuan-xtam4/)

  [153. 寻找旋转排序数组中的最小值（找最小值）](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/) : [严格 O(logN)，一起看清二分的本质](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/solution/gong-shui-san-xie-yan-ge-olognyi-qi-kan-6d969/)

  [154. 寻找旋转排序数组中的最小值 II（找最小值）](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/) : [详解为何元素相同会导致 O(n)，一起看清二分的本质](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/solution/gong-shui-san-xie-xiang-jie-wei-he-yuan-7xbty/)

* 二分 check 函数如何确定
  [34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/) : [考察对「二分」的理解，以及 check 函数的「大于 小于」怎么写](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/gong-shui-san-xie-kao-cha-dui-er-fen-de-86bk0/)

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解
