## 栈运用模拟

根据题意，利用元素各不相同，我们使用一个栈来处理 `pushed` 数组，每次将 $pushed[i]$ 放入栈中，然后比较当前栈顶元素是否与待弹出元素相同（使用变量 `j` 来代指当前待弹出元素下标），若相等则弹栈并进行 `j` 自增，当所有的元素处理完后，栈为空说明栈序列合法。

代码：

* []

```Java
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        Deque<Integer> d = new ArrayDeque<>();
        for (int i = 0, j = 0; i < pushed.length; i++) {
            d.addLast(pushed[i]);
            while (!d.isEmpty() && d.peekLast() == popped[j] && ++j >= 0) d.pollLast(); 
        }
        return d.isEmpty();
    }
}
```

* []

```Typescript
function validateStackSequences(pushed: number[], popped: number[]): boolean {
    let n = pushed.length, he = 0, ta = 0
    const stk: number[] = new Array<number>(n).fill(0)
    for (let i = 0, j = 0; i < n; i++) {
        stk[ta++] = pushed[i]
        while (he < ta && stk[ta - 1] == popped[j] && ++j >= 0) ta--
    }
    return he == ta
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 双指针

我们也可以直接利用 `pushed` 充当栈，使用变量 `idx` 代指栈顶下标，变量 `j` 指向 `popped` 中待弹出的元素。

该做法好处无须额外空间，坏处是会修改入参数组。

代码：

* []

```Java
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        int n = pushed.length, idx = 0;
        for (int i = 0, j = 0; i < n; i++) {
            pushed[idx++] = pushed[i];
            while (idx > 0 && pushed[idx - 1] == popped[j] && ++j >= 0) idx--;
        }
        return idx == 0;
    }
}
```

* []

```TypeScript
function validateStackSequences(pushed: number[], popped: number[]): boolean {
    let n = pushed.length, idx = 0
    for (let i = 0, j = 0; i < n; i++) {
        pushed[idx++] = pushed[i]
        while (idx > 0 && pushed[idx - 1] == popped[j] && ++j >= 0) idx--
    }
    return idx == 0
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 加餐

**加餐一道同类型题目 : [常规栈运用题](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247493276&idx=1&sn=b4b1ff8e6b1794f4f2e4327399755b0c)🎉🎉**

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
