### 方法：BFS

1. 找到所有起点，设置距离为 0
2. BFS 向两侧扩展，先到达的点替换长度，并加入队列

* java

```java
class Solution {
    public int[] shortestToChar(String s, char c) {
        int n = s.length();
        int[] ans = new int[n];
        Arrays.fill(ans,-1);
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i < n; i++){
            if(s.charAt(i)==c){
                queue.offer(i);
                ans[i] = 0;
            }
        }

        while(!queue.isEmpty()){
            int pos = queue.poll();
            if(pos-1>=0 && ans[pos-1]==-1){
                queue.offer(pos-1);
                ans[pos-1]=ans[pos]+1;
            }

            if(pos+1<n && ans[pos+1]==-1){
                queue.offer(pos+1);
                ans[pos+1] = ans[pos]+1;
            }
        }
        return ans;
    }
}
```

时间复杂度：O(n)
空间复杂度：O(n)
