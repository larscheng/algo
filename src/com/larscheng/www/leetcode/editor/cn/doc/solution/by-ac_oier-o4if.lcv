## 二分 + 双指针

根据题意，由于对距离定义使用的是绝对值，因此从原数组中找数对 $(i, j)$，等价于在排序数组中找数对 $(i, j)$。

同时由于 $k$ 的范围为 $n^2$，因此我们不能使用复杂度为 $O(k\log{n})$ 的「多路归并」做法来做。

利用数据范围 $0 <= nums[i] <= 10^6$，我们知道距离值域范围为 $[0, 10^6]$，假设所能形成的距离序列为 $A = a_1, a_2, ... ,a_m$，此时在以第 $k$ 小的距离值为分割点的数轴上，具有「二段性」，记这第 $k$ 小的距离值为 $a_k$：

* 处于 $a_k$ 右侧的所有位置 $a_i$（包含 $a_k$）**必然满足**「序列 $A$ 中值小于等于 $a_i$ 的数不少于 $k$ 个」；
* 处于 $a_k$ 左侧的所有位置 $a_i$（不包含 $a_k$）**不一定满足**「序列 $A$ 中值小于等于 $a_i$ 的数不少于 $k$ 个」（当且仅当 $a_k$ 在序列 $A$ 中不重复，或 $a_k$ 恰好是连续段距离值中的左端点时，必然不满足）。

因此这本质上是一个满足 `1?` 特性（而不是 `10` 特性）的问题，我们可以使用「二分」来找到 $a_k$ 值。

假设当前我们二分到的值是 $x$，利用我们排序好的 `nums`，我们并不需要真正的构建出序列 $A$，即可统计值小于等于 $x$ 的数量：枚举左端点 $i$，每次找第一个不满足条件的右端点 $j$（由于 $j$ 是第一个不满足条件的值，因此合法右端点范围为 $[i + 1, j - 1]$，共 $j - i - 1$ 个），利用 `nums` 有序，并且所有 $nums[i]$ 均为正数，可知 $j$ 会随着 $i$ 增大而逐步增大，即这部分利用「双指针」可实现 $O(n)$ 复杂度。

代码：

* []

```Java
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        Arrays.sort(nums);
        int l = 0, r = (int)1e6;
        while (l < r) {
            int mid = l + r >> 1;
            if (check(nums, mid) >= k) r = mid;
            else l = mid + 1;
        }
        return r;
    }
    int check(int[] nums, int x) {
        int n = nums.length, ans = 0;
        for (int i = 0, j = 1; i < n; i++) {
            while (j < n && nums[j] - nums[i] <= x) j++;
            ans += j - i - 1;
        }
        return ans;
    }
}
```

* 时间复杂度：排序的复杂度为 $O(n\log{n})$，二分答案复杂度为 $O(n\log{m})$，其中 $m = 1e6$ 为距离值域。整体复杂度为 $O(n\log{m})$
* 空间复杂度：$O(\log{n})$

---

## 最后

今天是连续更新每日一题题解的第 $500$ 天 🎉 🎉 （对我而言，$100$ 天常有，$500$ 还是第一次，~~稍后会在讨论区发个总结~~ 在 [这里](https://leetcode.cn/circle/discuss/42Bgmk/) 呢 ~

特殊的日子，开个赞赏拍个全家福，仍然是「**学生免费，非学生是否赞赏都能看**」的原则。

另外需要强调：力扣「赞赏」行为的发生，必须基于「你十分喜欢该作者」&「你十分喜欢该平台」，两者缺一不可。

如果你确定满足上述所有条件的话，可以花 **最多一元（千万千万不要给多了，就给一元就行）** 留个头像 🤣，或者只需给我点个赞留个言，我也同样开心 ❤️

![WechatIMG2425.jpeg](https://pic.leetcode-cn.com/1655258759-NKjVmO-WechatIMG2425.jpeg)
