要尽可能满足更多的孩子，因为饼干不能掰开，所以最容易想到的就是贪心算法。《算法导论》中对贪心算法有这样一段描述

* 

```
贪心算法（greedy algorithm）就是这样的算法，它在每一步都做出当时看起来最佳的选择。
也就是说，它总是做出局部最优的选择，寄希望这样的选择能导致全局最优解。
```

所以这道题我们可以让胃口大的吃大块，胃口小的吃小块。

一种最简单的方式就是先从胃口最小的孩子开始，拿最小的饼干试一下能不能满足他，如果能满足就更好，如果不能满足，在找稍微大一点的，如果还不能满足就再找更大一点的……

* 

```
public int findContentChildren(int[] g, int[] s) {
    //先对胃口值和饼干尺寸进行排序
    Arrays.sort(g);
    Arrays.sort(s);
    int count = 0;
    for (int j = 0; count < g.length && j < s.length; j++) {
        //如果当前饼干能满足当前孩子的胃口值，count就加1，否则就继续查找更大的饼干
        if (g[count] <= s[j])
            count++;
    }
    return count;
}
```

<br> </br>

还一种方式就是先从最大的饼干开始，看一下能不能满足胃口最大的，如果不能满足就找胃口稍微小一点是再试一下，如果还不能满足就一直找……

* 

```
public int findContentChildren(int[] g, int[] s) {
    //先对胃口值和饼干尺寸进行排序
    Arrays.sort(g);
    Arrays.sort(s);
    int count = 0;
    int i = s.length - 1;
    for (int j = g.length - 1; i >= 0 && j >= 0; j--) {
        //如果当前饼干能满足当前孩子的胃口值，count就加1，否则就继续查找胃口更小的孩子
        if (g[j] <= s[i]) {
            count++;
            i--;
        }
    }
    return count;
}
```

<br> </br>

**如果觉得有用就给个赞吧，你的赞是给我最大的鼓励，也是我写作的最大动力**
