### 解题思路

我们可以用一个数`i`$(0 \leq i \leq 2^n - 1)$表示一个集合，数`i`的第`j`位表示第`j`个数是否属于当前枚举的集合,如果属于就进行异或操作。
举个例子：[1，3]；那他子集的个数就为`2^n`。`i`的二进制表示就模拟该数组的两个数是否被选择。
`i=0`，其二进制位`00`，表示子集空（两个数都不选）。
`i=1`，其二进制为`01`，表示子集`[1]`（选择第一个元素，不选第二个元素。注意这里是倒着选的，二进制最后一位表示集合中第一位，二进制第一位表示集合中最后一位）
`i=2`，其二进制为`10`，表示子集`[3]`（选择第二个元素，不选第一个元素）
`i=3`，其二进制为`11`，表示子集`[1，3]`（两个元素都选）

### 代码

* java

```java
class Solution {
    public int subsetXORSum(int[] nums) {
        int n = nums.length;
        int res = 0;    
        for (int i = 0; i < 1 << n; i ++ ) {    //i从0~2^n - 1
            int s = 0;
            for (int j = 0; j < n; j ++ )   //判断每一位是否属于当前集合
                if ((i >> j & 1) != 0)  //如果是1则属于该集合
                    s ^= nums[j];   
            res += s;   //将每次结果加入答案
        }
        return res;
    }
}
```

### 复杂度分析

- 时间复杂度：O($2^n * n$)
- 空间复杂度：O(1)

