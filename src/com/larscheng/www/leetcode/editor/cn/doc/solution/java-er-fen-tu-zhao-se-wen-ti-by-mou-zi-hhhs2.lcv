* 

```
// 二分图（染成红色或蓝色）
// 如果任意一个点的颜色与其邻接点的都颜色不相同，则true
class Solution {
    // 邻接表：保存跟当前结点连通的结点
    List[] adj;
    // 记录当前结点被染成什么色
    int[] colors;
    // 0 表示未染色
    static final int NOCOLOR = 0;
    // 1 表示染成红色
    static final int RED = 1;
    // 2 表示染成蓝色
    static final int BLUE = 2;

    public boolean possibleBipartition(int n, int[][] dislikes) {
        // 索引从1开始
        adj = new List[n+1];
        colors = new int[n+1];
        // 非基本数据类型的数据，都要先做初始化
        for(int i=1; i<=n; i++) {
            adj[i] = new ArrayList<>();
        }   
        // 填写邻接表    
        for(int[] dis: dislikes) {
            int d1 = dis[0];
            int d2 = dis[1];
            adj[d1].add(d2);
            adj[d2].add(d1);
        }
        // 遍历每个结点
        for(int i=1; i<=n; i++) {
            // 如果已经染色，直接跳过，加快速度
            if(colors[i] != NOCOLOR) {
                continue;
            }
            // 如果行不通，返回false
            if(!dfs(i, RED)) {
                return false;
            }
        }
        return true;
    }

    public boolean dfs(int index, int col) {
        // 先定义出反色（红色->蓝色; 蓝色->红色）
        int counterCol = col == RED ? BLUE: RED;
        // 如果未染色
        if(colors[index] == NOCOLOR) {
            // 染成形参指定的颜色
            colors[index] = col;
            // 继续染它的邻接点（染成反色）
            List<Integer> ad = adj[index];
            for(int a: ad) {
                if(!dfs(a, counterCol)) {
                    return false;
                }
            }
        } else {
            // 如果已染色，但是染的色和形参指定要染的色不同，则返回false
            if(colors[index] != col) {
                return false;
            } 
            // 一开始写了以下代码，继续染他的邻接点，超时了；注释掉就跑通了
            // else {
            //     List<Integer> ad = adj[index];
            //     for(int a: ad) {
            //         if(!dfs(a, counterCol)) {
            //             return false;
            //         }
            //     }
            // }
        }
        return true;
    }
}
```

