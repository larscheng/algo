## 前缀和

枚举所有长度为奇数的子数组，我们可以通过「枚举长度 - 枚举左端点，并计算右端点」的两层循环来做。

而对于区间 $[l, r]$ 的和问题，可以直接再加一层循环来做，这样复杂度来到了 $O(n^3)$，但本题数据范围只有 $100$，也是可以过的。

对于此类区间求和问题，我们应当想到使用「前缀和」进行优化：使用 $O(n)$ 的复杂度预处理出前缀和数组，每次查询 $[l, r]$ 区间和可以在 $O(1)$ 返回。

代码：

* []

```Java
class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int n = arr.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] + arr[i - 1];
        int ans = 0;
        for (int len = 1; len <= n; len += 2) {
            for (int l = 0; l + len - 1 < n; l++) {
                int r = l + len - 1;
                ans += sum[r + 1] - sum[l];
            }
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n^2)$
* 空间复杂度：$O(n)$

----

## 数学

事实上，我们可以统计任意值 $arr[i]$ 在奇数子数组的出现次数。

对于原数组的任意位置 $i$ 而言，其左边共有 $i$ 个数，右边共有 $n - i - 1$ 个数。

**$arr[i]$ 作为某个奇数子数组的成员的充要条件为：其所在奇数子数组左右两边元素个数奇偶性相同。**

于是问题转换为如何求得「$arr[i]$ 在原数组中两边连续一段元素个为奇数的方案数」和「$arr[i]$ 在原数组两边连续一段元素个数为偶数的方案数」。

由于我们已经知道 $arr[i]$ 左边共有 $i$ 个数，右边共有 $n - i - 1$ 个数，因此可以算得组合数：

* 位置 $i$ 左边奇数个数的方案数为 $(i + 1) / 2$，右边奇数个数的方案数为 $(n - i) / 2$；
* 位置 $i$ 左边偶数（非零）个数的方案数为 $i / 2$，右边偶数（非零）个数的方案数为 $(n - i - 1) / 2$；
  * 考虑左右两边不选也属于合法的偶数个数方案数，因此在上述分析基础上对偶数方案数自增 $1$。

至此，我们得到了位置 $i$ 左右奇数和偶数的方案数个数，根据「如果 $arr[i]$ 位于奇数子数组中，其左右两边元素个数奇偶性相同」以及「乘法原理」，我们知道 $arr[i]$ 同出现在多少个奇数子数组中，再乘上 $arr[i]$ 即是 $arr[i]$ 对答案的贡献。

代码：

* []

```Java
class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int n = arr.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int l1 = (i + 1) / 2, r1 = (n - i) / 2; // 奇数
            int l2 = i / 2, r2 = (n - i - 1) / 2; // 偶数
            l2++; r2++;
            ans += (l1 * r1 + l2 * r2) * arr[i];
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
