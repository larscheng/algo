## 模拟 + 数据结构

先将 $tasks$ 按照「入队时间」进行升序排序，同时为了防止任务编号丢失，排序前需要先将二元组的 $tasks$ 转存为三元组，新增记录的是原任务编号。

然后可以按照「时间线」进行模拟：

1. 起始令 $time$ 从 $1$ 开始进行递增，每次将到达「入队时间」的任务进行入队；

2. 判断当前队列是否有可以执行的任务：
   1. 如果没有，说明还没到达下一个入队任务的入队时间，直接将 $times$ 快进到下一个入队任务的入队时间；
   2. 如果有，从队列中取出任务执行，同时由于是单线程执行，在该任务结束前，不会有新任务被执行，将 $times$ 快进到该任务的结束时间。

代码：

* []

```Java
class Solution {
    public int[] getOrder(int[][] ts) {
        int n = ts.length;
        // 将 ts 转存成 nts，保留任务编号
        int[][] nts = new int[n][3];
        for (int i = 0; i < n; i++) nts[i] = new int[]{ts[i][0], ts[i][1], i};
        // 根据任务入队时间进行排序
        Arrays.sort(nts, (a,b)->a[0]-b[0]);
        // 根据题意，先按照「持续时间」排序，再根据「任务编号」排序
        PriorityQueue<int[]> q = new PriorityQueue<>((a,b)->{
            if (a[1] != b[1]) return a[1] - b[1];
            return a[2] - b[2];
        });
        int[] ans = new int[n];
        for (int time = 1, j = 0, idx = 0; idx < n; ) {
        	// 如果当前任务可以添加到「队列」中（满足入队时间）则进行入队
            while (j < n && nts[j][0] <= time) q.add(nts[j++]);
            if (q.isEmpty()) {
	            // 如果当前「队列」没有任务，直接跳到下个任务的入队时间
                time = nts[j][0];
            } else {
            	// 如果有可执行任务的话，根据优先级将任务出队（记录下标），并跳到该任务完成时间点
                int[] cur = q.poll();
                ans[idx++] = cur[2];
                time += cur[1];
            }
        }
        return ans;
    }
}
```

* 时间复杂度：将 $ts$ 转存成 $nts$ 的复杂度为 $O(n)$；对 $nts$ 排序复杂度为 $O(n\log{n})$；模拟时间线，将任务进行入队出队操作，并构造最终答案复杂度为 $O(n\log{n})$。整体复杂度为 $O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
