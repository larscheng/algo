## DFS

定义全局变量 `ans`（初始化为 `0`），用于记录二叉树的最大直径。

设计用于遍历二叉树的 `DFS` 函数：函数传入当前节点 `u`，返回以该节点为根时，方向“往下”的最大路径节点数量（注意这里是点数，而不是题目要求的边数）。

单次执行流程中，先递归处理当前节点 `u` 的左右节点，得到左右子树为根时的“往下”最大路径 `l` 和 `r`，两者中的较大值 `+1` 即是本次执行流程的返回值（`+1` 的含义是在子路径基础上增加当前节点）。

同时，`l + r` 则是以当前节点 `u` 为路径最高点时的路径长度，用此更新全局 `ans` 即可。

代码：

* []

```Java
class Solution {
    int ans = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        dfs(root);
        return ans;
    }
    int dfs(TreeNode u) {
        if (u == null) return 0;
        int l = dfs(u.left), r = dfs(u.right);
        ans = Math.max(ans, l + r);
        return Math.max(l, r) + 1;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
