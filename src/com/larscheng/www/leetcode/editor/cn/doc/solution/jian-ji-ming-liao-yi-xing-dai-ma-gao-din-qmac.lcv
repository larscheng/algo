> Problem: [2678. 老人的数目](https://leetcode.cn/problems/number-of-senior-citizens/description/)

[TOC]

# 思路

> 讲述看到这一题的思路

# 解题方法

> 截取字符串11,12位字符并转换成数字

# 复杂度

- 时间复杂度:

> 该代码涉及一个简单的循环，循环遍历了数组 details 中的每个元素，并执行了常数时间复杂度的操作（字符串截取和整数转换）。因此，循环的时间复杂度为 O(n)，其中 n 是数组 details 的长度。整体代码的时间复杂度为 O(n)，其中 n 是输入数组的大小。

- 空间复杂度:

> 该代码只使用了常数级别的额外空间来存储变量 cnt、detail、substring 和循环迭代器。因此，额外的空间消耗是固定的，与输入规模无关。因此，代码的空间复杂度为 O(1)，即常数级别的空间消耗。

# Code

* []

```Java

class Solution {
    public int countSeniors(String[] details) {
        return (int)Arrays.stream(details)
                .map(detail -> Integer.parseInt(detail.substring(11,13)))
                .filter(age -> age > 60).count();
    }
}
```

