## 完全背包（朴素解法）

在 [322. 零钱兑换](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-bei-bao-wen-ti-zhan-zai-3265/) 中，我们求的是「取得特定价值所需要的最小物品个数」。

对于本题，我们求的是「取得特定价值的方案数量」。

**求的东西不一样，但问题的本质没有发生改变，同样属于「组合优化」问题。**

你可以这样来理解什么是组合优化问题：

**被选物品之间不需要满足特定关系，只需要选择物品，以达到「全局最优」或者「特定状态」即可。**

同时硬币相当于我们的物品，每种硬币可以选择「无限次」，很自然的想到「完全背包」。

这时候可以将「完全背包」的状态定义搬过来进行“微调”：

**定义 $f[i][j]$ 为考虑前 $i$ 件物品，凑成总和为 $j$ 的方案数量。**

为了方便初始化，我们一般让 $f[0][x]$ 代表不考虑任何物品的情况。

因此我们有显而易见的初始化条件：$f[0][0] = 1$，其余 $f[0][x] = 0$。

代表当没有任何硬币的时候，存在凑成总和为 0 的方案数量为 1；凑成其他总和的方案不存在。

当「状态定义」与「基本初始化」有了之后，我们不失一般性的考虑 $f[i][j]$ 该如何转移。

对于第 $i$ 个硬币我们有两种决策方案：

* 不使用该硬币：

$f[i - 1][j]$

* 使用该硬币：由于每个硬币可以被选择多次（容量允许的情况下），因此方案数量应当是选择「任意个」该硬币的方案总和：

$\sum_{k = 1}^{\left \lfloor {j / val} \right \rfloor}f[i - 1][j - k * val], val = nums[i - 1]$

代码：

* []

```Java
class Solution {
    public int change(int cnt, int[] cs) {
        int n = cs.length;
        int[][] f = new int[n + 1][cnt + 1];
        f[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            int val = cs[i - 1];
            for (int j = 0; j <= cnt; j++) {
                f[i][j] = f[i - 1][j];
                for (int k = 1; k * val <= j; k++) {
                    f[i][j] += f[i - 1][j - k * val];  
                }
            }
        }
        return f[n][cnt];
    }
}
```

* 时间复杂度：共有 $n * cnt$ 个状态需要转移，每个状态转移最多遍历 $cnt$ 次。整体复杂度为 $O(n * cnt^2)$。
* 空间复杂度：$O(n * cnt)$。

---

## 完全背包（一维优化）

显然二维完全背包求解方案复杂度有点高。

$n$ 的数据范围为 $10^2$，$cnt$ 的数据范围为 $10^3$，总的计算量为 $10^8$ 以上，处于超时边缘（实际测试可通过）。

我们需要对其进行「降维优化」，可以使用最开始讲的 [数学分析方式](https://leetcode-cn.com/problems/perfect-squares/solution/dong-tai-gui-hua-bei-bao-wen-ti-qiang-hu-hcmi/)，或者上一讲讲的 [换元优化方式](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-bei-bao-wen-ti-zhan-zai-3265/) 进行降维优化。

由于 [数学分析方式](https://leetcode-cn.com/problems/perfect-squares/solution/dong-tai-gui-hua-bei-bao-wen-ti-qiang-hu-hcmi/) 十分耗时，我们用得更多的 [换元优化方式](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-bei-bao-wen-ti-zhan-zai-3265/)。两者同样具有「可推广」特性。

因为后者更为常用，所以我们再来回顾一下如何进行「直接上手写一维空间优化的版本」 ：

1. 在二维解法的基础上，直接取消「物品维度」
2. 确保「容量维度」的遍历顺序为「从小到大」（适用于「完全背包」）
3. 将形如 $f[i - 1][j - k * val]$ 的式子更替为 $f[j - val]$，同时解决「数组越界」问题（将物品维度的遍历修改为从 $val$ 开始）

代码：

* []

```java
class Solution {
    public int change(int cnt, int[] cs) {
        int n = cs.length;
        int[] f = new int[cnt + 1];
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            int val = cs[i - 1];
            for (int j = val; j <= cnt; j++) {
                f[j] += f[j - val];
            }
        }
        return f[cnt];
    }
}
```

* 时间复杂度：共有 $n * cnt$ 个状态需要转移，整体复杂度为 $O(n * cnt)$。
* 空间复杂度：$O(cnt)$。

---

## 其他「背包」问题

看不懂「背包」解决方案？

以下是公主号讲过的「背包专题」系列目录，欢迎 [关注](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 🍭🍭🍭 ：

1. 01背包 : [背包问题 第一讲](https%3A//mp.weixin.qq.com/s/xmgK7SrTnFIM3Owpk-emmg)

   1. 【练习】01背包 : [背包问题 第二讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247485658%26idx%3D1%26sn%3Df298abe76d9cc058805b6a18d2523db6)

   2. 【学习&练习】01背包 : [背包问题 第三讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247485727%26idx%3D1%26sn%3D2cfb1a43bdb4f47cf4457c58f809deb8)

   3. 【加餐/补充】01 背包：[背包问题 第二十一讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488868%26idx%3D1%26sn%3D5e54a1d091a8249d3033a28fc299076d)
2. 完全背包 : [背包问题 第四讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486107%26idx%3D1%26sn%3De5fa523008fc5588737b7ed801caf4c3)

   1. 【练习】完全背包 : [背包问题 第五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486225%26idx%3D1%26sn%3Df63388476ccf29e465536a065cffe8d8)

   2. 【练习】完全背包 : [背包问题 第六讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486435%26idx%3D1%26sn%3D2464b01e9c0fb8d81fcea6dd4ed0ec92)

   3. 【练习】完全背包 : [背包问题 第七讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486586%26idx%3D1%26sn%3Dda57c4d7d39bcbd2e16c2cc4e21b2361)
3. 多重背包 : [背包问题 第八讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486649%26idx%3D1%26sn%3Dba09ee2d78377c2ddbb9e43622880133)

4. 多重背包（优化篇）

   1. 【上】多重背包（优化篇）: [背包问题 第九讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486796%26idx%3D1%26sn%3Da382b38f8aed295410550bb1767437bd)

   2. 【下】多重背包（优化篇）: [背包问题 第十讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247486963&idx=1&sn=51d34f0f841122ed9be2335a402041e8&chksm=fd9ca6eccaeb2ffa1abe413177be376799b427b092bfb73c13e7b77e171b460f4c24b3b7d3bc&token=1872331648&lang=zh_CN#rd)
5. 混合背包 : [背包问题 第十一讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487034&idx=1&sn=eaa05b76387d34aa77f7f14f35fa78a4&chksm=fd9ca525caeb2c33095d285222dcee0dd072465bf7288bda0aab39e90a04bb7b1af018b89fd4&token=1872331648&lang=zh_CN#rd)

6. 分组背包 : [背包问题 第十二讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487504&idx=1&sn=9ac523ec0ac14c8634a229f8c3f919d7&chksm=fd9cbb0fcaeb32196b80a40e4408f6a7e2651167e0b9e31aa6d7c6109fbc2117340a59db12a1&token=1936267333&lang=zh_CN#rd)

   1. 【练习】分组背包 : [背包问题 第十三讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247487587%26idx%3D1%26sn%3Dcc18c2e8c3374612113df7ab7fdc8d46)
7. 多维背包

   1. 【练习】多维背包 : [背包问题 第十四讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247487782%26idx%3D1%26sn%3Df6852cea7a28eb2c522dc424270617b5)

   2. 【练习】多维背包 : [背包问题 第十五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488103%26idx%3D1%26sn%3D5767d5691b6c87f15ca3182c3742fc79)
8. 树形背包 : [背包问题 第十六讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488290%26idx%3D1%26sn%3Da9c525e36211710e0ff480e3300e346b)

   1. 【练习篇】树形背包 : [背包问题 第十七讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488337%26idx%3D1%26sn%3D016e65bdff75841c9041a14adeb24f64)

   2. 【练习篇】树形背包 : [背包问题 第十八讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488400%26idx%3D1%26sn%3D7ec15fd8dbb8d85fb9a895a7073157ce)
9. 背包求方案数

   1. 【练习】背包求方案数 : [背包问题 第十九讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488724%26idx%3D1%26sn%3D68b106ec37730b9ce3988195ae45ac7b)

   2. 【练习】背包求方案数 : [背包问题 第十五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488103%26idx%3D1%26sn%3D5767d5691b6c87f15ca3182c3742fc79)

   [注：因为之前实在找不到题，这道「求方案数」题作为“特殊”的「多维费用背包问题求方案数」讲过]

10. 背包求具体方案

    1. 【练习】背包求具体方案 : [背包问题 第二十讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488752%26idx%3D1%26sn%3De7af274d7293558718748d54f7ddade1)
11. 泛化背包
    1. 【练习】泛化背包

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
