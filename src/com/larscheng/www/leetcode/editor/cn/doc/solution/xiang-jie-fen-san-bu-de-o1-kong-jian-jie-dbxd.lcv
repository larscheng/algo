## 前言

由于 $O(m*n)$ 和 $O(m+n)$ 空间的解法都十分简单，无非是「同等大小的矩阵」或「与行列数量相等的标识」来记录置零信息。

这里着重讲解利用原矩阵的 $O(1)$ 空间解法。

---

## O(1) 空间

**1. 使用两个变量（r0 & c0），记录「首行 & 首列」是否该被置零**

![image.png](https://pic.leetcode-cn.com/1616292004-JWVOyl-image.png)

**2.「非首行首列」的位置**
* 将置零信息存储到原矩阵
* 根据置零信息，置零「非首行首列」的位置

![image.png](https://pic.leetcode-cn.com/1616291987-UnBQcI-image.png)

**3. 使用 r0 & c0 ，置零「首行 & 首列」**

![image.png](https://pic.leetcode-cn.com/1616292108-mznYHo-image.png)

代码：

* []

```Java
class Solution {
    public void setZeroes(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        // 1. 扫描「首行」和「首列」记录「首行」和「首列」是否该被置零
        boolean r0 = false, c0 = false;
        for (int i = 0; i < m; i++) {
            if (mat[i][0] == 0) {
                r0 = true;
                break;
            }
        }
        for (int j = 0; j < n; j++) {
            if (mat[0][j] == 0) {
                c0 = true;
                break;
            }
        }
        // 2.1 扫描「非首行首列」的位置，如果发现零，将需要置零的信息存储到该行的「最左方」和「最上方」的格子内
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (mat[i][j] == 0) mat[i][0] = mat[0][j] = 0;
            }
        }
        // 2.2 根据刚刚记录在「最左方」和「最上方」格子内的置零信息，进行「非首行首列」置零
        for (int j = 1; j < n; j++) {
            if (mat[0][j] == 0) {
                for (int i = 1; i < m; i++) mat[i][j] = 0;
            }
        }
        for (int i = 1; i < m; i++) {
            if (mat[i][0] == 0) Arrays.fill(mat[i], 0);
        }
        // 3. 根据最开始记录的「首行」和「首列」信息，进行「首行首列」置零
        if (r0) for (int i = 0; i < m; i++) mat[i][0] = 0;
        if (c0) Arrays.fill(mat[0], 0);
    }
}
```

* 时间复杂度：$O(n*m)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
