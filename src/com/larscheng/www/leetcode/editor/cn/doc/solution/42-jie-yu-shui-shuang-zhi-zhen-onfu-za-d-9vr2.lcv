> Problem: [42. 接雨水](https://leetcode.cn/problems/trapping-rain-water/description/)

[TOC]

# 思路

> 对每个单位单独计算能接多少雨水，而每个单位能接的雨水取决于它左边最高的墙和右边最高的墙之中最小的那一个，因此可以用前缀和后缀最大值解决。在计算前后缀最大值和最小值时，我们可以发现，紧贴着目前计算到的前缀（后缀）的那个水坑可以知道它左边（右边）的最大值。如果右边已知的最大值已经大于了当前单位的左边的最大值，那么可以得出右边一定不会漏水，该水坑能够接多少雨水就可以知道了（即左边的最大值减去当前的高度）。

# 解题方法

> 由于左右两边是同理的情况，则设计一个双指针，分别指向最左边和最右边，维护两个最大值，判断右边的最大值和左边的最大值谁更大，更小的那个就可以获得当前水坑能够接多少水，然后挪动这个指针。

# 复杂度

时间复杂度:

> $O(n)$

空间复杂度:

> $O(1)$

# Code

* []

```C++
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size(), ML = height[0], MR = height[n - 1], left = 1, right = n - 2, sum = 0;
        while(left <= right){
            if(ML < MR){
                sum += (ML - height[left]) < 0 ? 0 : (ML - height[left]);
                ML = max(ML, height[left]);
                left++;
            }
            else {
                sum += (MR - height[right]) < 0 ? 0 : (MR - height[right]);
                MR = max(MR, height[right]);
                right--;
            }
        }
        return sum;
    }
};
```

