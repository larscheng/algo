### 解题思路

拿到这道题 首先想到的是应该运行时间到达最早的任务，但是需要考虑的是运行的过程中有其他任务加入，所以要考虑下一个任务的开始时间。

所以有两种情况：
1. 正在运行的任务结束前，有其他任务加入。此时需要把中途加入的任务放入优先队列。
2. 正在运行的任务结束前，没有其他任务加入。
3. 如果一直执行情况 `2` 很可能会导致优先队列为空，此时需要更新结束时间，这样就能允许至少下一个任务加入到优先队列。

其他的想说的点就是：
1. 我们需要建一个新的数组，来一直回溯原数组的index。
2. 新数组 `newTasks` 排序应该是按照任务到达顺序排列，这样能至少保证先到达的任务有可能先被schedule。
3. 优先队列。`pq` 排序应该是按照任务长度，因为他们已经是等待队列中的任务，下一个任务是运行时间最短的任务，再加上index，一起判断优先级。

### 代码

* java

```java
class Solution {
    public int[] getOrder(int[][] tasks) {
        int n = tasks.length;
        int[][] newTasks = new int[n][3];
        
        for(int i = 0; i < n; i++) {
            newTasks[i][0] = tasks[i][0];
            newTasks[i][1] = tasks[i][1];
            newTasks[i][2] = i;
        }

        Arrays.sort(newTasks, (o1, o2) -> o1[0] - o2[0]);
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((o1, o2) -> o1[1] != o2[1] ? o1[1] - o2[1] : o1[2] - o2[2]);

        int time = 0, resIdx = 0, enqIdx = 0;
        int[] res = new int[n];
        while(resIdx < n) {
            while(enqIdx < n && newTasks[enqIdx][0] <= time) {
                pq.offer(newTasks[enqIdx++]);
            }
            if(pq.isEmpty()) {
                time = newTasks[enqIdx][0];
                continue;
            }
            int[] nextJob = pq.poll();
            res[resIdx++] = nextJob[2];
            time += nextJob[1];
        }
        return res;
    }
}
```

