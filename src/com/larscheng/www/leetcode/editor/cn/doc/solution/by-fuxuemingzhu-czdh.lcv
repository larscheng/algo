大家好，我是 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/)。点击右上方的「**+关注**」**↗**，优质题解不间断！

## 题目大意

给出一些平面上点的二维坐标，求从这些点中抽取出 3 个点，能组成的最大的三角形面积。

题意很清晰。

## 解题方法

### 思路

我们把 $A(x1, y1),B(x2, y2),C(x3, y3)$分别向 $x$ 轴投影，分别得到点$E, D, F$。

可以得到 3 个梯形：以下图中的黄色的边为梯形的**上下底**，分别以三角形的三条边作为梯形的**斜边**。

![812. 最大三角形面积.002.png](https://pic.leetcode-cn.com/1652581790-XRkRMK-812.%20%E6%9C%80%E5%A4%A7%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF.002.png)

于是：

$三角形 ABC 的面积 = 梯形 BDEA 的面积 + 梯形 AEFC 的面积 - 梯形 BDFC 的面积$
$= [(y1 + y2) * (x1 - x2)]/2 + [(y3 + y1) * (x3 - x1)]/2 - [(y2 + y3) * (x3 - x2)]/2$
$= 1/2 * [x1(y2 - y3) + x2(y3 - y1) + x3(y1 - y2)]$

我们就有了根据三角形的三点的坐标求面积的公式。

### 代码

三重 $for$循环，从题目给出的二维坐标中取出 3 个点，根据上面的面积公式求组成的三角形面积。

取最大面积即可。

* []

```Python
class Solution:
    def largestTriangleArea(self, points):
        """
        :type points: List[List[int]]
        :rtype: float
        """
        res = 0
        N = len(points)
        for i in range(N - 2):
            for j in range(i + 1, N - 1):
                for k in range(i + 2, N):
                    (x1, y1), (x2, y2), (x3, y3) = points[i], points[j], points[k]
                    res = max(res, 0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))
        return res
```

* []

```C++
class Solution {
public:
    double largestTriangleArea(vector<vector<int>>& points) {
        const int N = points.size();
        double res = 0;
        for (int i = 0; i < N - 2; i ++) {
            for (int j = i + 1; j < N - 1; j ++) {
                for (int k = j + 1; k < N; k ++) {
                    auto& point1 = points[i];
                    auto& point2 = points[j];
                    auto& point3 = points[k];
                    int x1 = point1[0], y1 = point1[1];
                    int x2 = point2[0], y2 = point2[1];
                    int x3 = point3[0], y3 = point3[1];
                    res = max(res, 0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)));
                }
            }
        }
        return res;
    }
};
```

* []

```Java
class Solution {
    public double largestTriangleArea(int[][] points) {
        int N = points.length;
        double res = 0;
        for (int i = 0; i < N - 2; i ++) {
            for (int j = i + 1; j < N - 1; j ++) {
                for (int k = j + 1; k < N; k ++) {
                    int[] point1 = points[i];
                    int[] point2 = points[j];
                    int[] point3 = points[k];
                    int x1 = point1[0], y1 = point1[1];
                    int x2 = point2[0], y2 = point2[1];
                    int x3 = point3[0], y3 = point3[1];
                    res = Math.max(res, 0.5 * Math.abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)));
                }
            }
        }
        return res;
    }
}
```

### 复杂度

- 时间复杂度：$O(N^3)$，$N$是给出的坐标数。
- 空间复杂度：$O(1)$，没用额外空间。

## 总结

1. 求三角形的面积是两千年来的经典问题，除了死记公式以外，不妨按照我上面的做法画三条辅助线形成梯形去求。

---

我是 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) ，刷算法题 1000 多道，写了 1000 多篇算法题解，收获阅读量 300 万。
**关注我**，你将不会错过我的精彩动画题解、面试题分享、组队刷题活动，进入主页 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 右侧有刷题组织，从此刷题不再孤单。

- 在刷题的时候，如果你不知道该怎么刷题，可以看 [LeetCode 应该怎么刷？](https://mp.weixin.qq.com/s/viDYrSlF5INEhVWiJhM2EQ)
- 如果你觉得题目太多，想在短时间内快速提高，可以看 [LeetCode 最经典的 100 道题](https://mp.weixin.qq.com/s/e51CEkEP6Wz850JYbgz8dw)。
- 送你一份刷题的代码模板：[【LeetCode】代码模板，刷题必会](https://blog.csdn.net/fuxuemingzhu/article/details/101900729)
- 我写的 1000 道 LeetCode 题解，[都在这里了，免费拿走](https://leetcode-cn.com/link/?target=https%3A%2F%2Fgithub.com%2Ffuxuemingzhu%2FLeetcode-Solution-All)。

