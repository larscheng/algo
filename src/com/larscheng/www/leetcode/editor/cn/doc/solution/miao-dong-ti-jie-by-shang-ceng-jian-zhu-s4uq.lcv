# C++二分法

确定好左右边界，在左右边界范围内进行二分
关键是check函数的设定
1. 若check函数满足，即能够覆盖houses所有范围，则收缩右边界
2. 否则收缩左边界

* []

```C++
class Solution {
public:
    bool check(vector<int>& houses, vector<int>& heaters,int mid) {//check函数
        int i = 0;
        for(int j = 0; j < houses.size() ; j++) {
            // 当前位置的供暖器无法供暖至 j 位置的房间， 换下一个位置的供暖器。直到能供暖到该位置为止。
            while(i<heaters.size() && (houses[j] < heaters[i]-mid || houses[j] > heaters[i]+mid)) {
                i++;
            }
            if(i==heaters.size()) return false;//不满足条件   返回false
        }
        return true;//能够覆盖所有house  返回true
    }
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        sort(houses.begin(), houses.end());
        sort(heaters.begin(), heaters.end());
        int left = 0, right = max(heaters[heaters.size()-1]-houses[0],houses[houses.size()-1]-heaters[0]);//左右边界
        while(left < right) {//二分开始
            int mid = left + right >> 1;
            if(check(houses,heaters,mid)) right = mid;
            else left = mid + 1;
        }
        return left;
    }
};
```

