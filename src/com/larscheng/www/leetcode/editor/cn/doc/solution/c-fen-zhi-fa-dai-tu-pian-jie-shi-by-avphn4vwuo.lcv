### 1 前言

看官方题解理解了半天，实在没有看太懂，然后自己拿笔把每一步都画出来，然后一步一步往前推，结果便显而易见了。

#### 1.1 重点：终归结底， 归结于两个公式

(1) 如果 ${ X, Y, Z }$ 是一个漂亮数组，则 ${ k * X + b, k * Y + b, k * Z + b }$ 也一定是漂亮数组

(2) 奇数 + 偶数 = 奇数 一定成立

#### 1.2 证明:

(1) 如果 $2*Y \ne X+Z$

(2) 则 $2*(k * Y + b) \ne k*X+b+k*Z+b$ 一定成立

### 2 思路

对于一个正整数 $N$, 我们将其**等分**为两部分，$left$ 和 $right$， 如果 $left$ 部分是漂亮数组，$right$ 部分也是漂亮数组， 同时 $left$ 部分全部是**奇数**，$right$ 部分全部是**偶数**，那么此时 $left + right$ 组成的数组一定也是一个漂亮数组。

- 所以可以采用**分治算法，自顶向下**

- 先将数组分为两部分，将奇数放在 $left$，偶数放在 $right$

- 同时保证 $left$ 和 $right$ 都是漂亮数组

- **递归**...

### 3 也就是说

如果我现在知道了整数 $N$ 的 漂亮数组，那么通过 $k * N + b$ 的变换可以让 $N$ 变成 $2N$ 的奇部（前半部分 $left$ ), 同样通过 $k * N + b$ 的变换可以让 $N$ 变成 $2N$ 的偶部（后半部分 $right$ )，只不过 $k$ 和 $b$ 可能取不同的值而已

- $N = 1$ 时，漂亮数组为 $[1]$

- $N = 2$ 时，通过 $N = 1$ 变换。 $1 * 2-1 = 1, 1 * 2= 2$, 所以漂亮数组为 $[1,2]$

- $N = 3$ 时，通过 $N = 2$ 和 $N = 1$ 变换得到。 $N = 2$ 变换得奇部 $2 * 1 - 1 = 1, 2 * 2 - 1 = 3$; $N = 1$ 变换得到偶部分 $2 * 1 = 2$。最后漂亮数组为 $[1, 3, 2]$。始终保证奇部在前，偶部在后。

- **......**

- 所以最后相当于是做了一个**二分操作**，始终寻找**中点**，然后将两边分治成漂亮数组。

### 4 推理过程

#### 4.1 自顶向下，分治过程

![image.png](https://pic.leetcode-cn.com/1603376156-WeAWSQ-image.png)

***

#### 4.2 自底向上，反推过程

## ![image.png](https://pic.leetcode-cn.com/1603381735-QVBUfx-image.png)

***

### 5 代码

* 

```
class Solution {
public:
    unordered_map<int,vector<int> > mp;
    vector<int> beautifulArray(int N) {
        return f(N);
    }
    vector<int> f(int N) {
        vector<int> ans(N, 0);
        int t = 0;
        if (mp.find(N) != mp.end()) {
            return mp[N];
        }
        if (N != 1) {
            for (auto x : f((N+1)/2)){
                ans[t++]= 2 * x - 1;
            } 
            for (auto x : f(N/2)){
                ans[t++] =  2 * x;
            }
        }else {
            ans[0] = 1;
        }
        mp[N] = ans;
        return ans;
    }
};
```

添加一个`map`是为了记忆化，提高算法性能。

### 6 最后

写到这里不得不感叹算法的美妙
之前被动态规划折磨的死去活来
现在看来，不尽如此
任何一种算法都是如此精妙绝伦

> 如果对您有所帮助，希望不吝一赞！

