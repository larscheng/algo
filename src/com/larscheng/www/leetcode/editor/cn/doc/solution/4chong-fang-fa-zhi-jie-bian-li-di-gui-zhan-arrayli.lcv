方法一：直接遍历，此种方法相当于反向操作，与十进制的链表转换成十进制数同理，用（res * 10 + head.val）就可以恢复成十进制数，不信 你拿笔模拟一下~

* 

```
class Solution {
    public int getDecimalValue(ListNode head) {
        int res = 0;
        while(head != null){
            res = res * 2 + head.val;
            head = head.next;
        }
        return res;
    }
}
```

方法二，由于左移相当于乘以2，所以将方法一的乘以2替换成左移操作即可

* 

```
class Solution {
    public int getDecimalValue(ListNode head) {
        int res = 0;
        while(head != null){
            res = (res << 1) + head.val;
            head = head.next;
        }
        return res;
    }
}

```

方法三：递归，参考leetcode题库中逆序打印链表的思路

* 

```
class Solution {
    int count = 0;
    int res = 0;
    public int getDecimalValue(ListNode head) {
        if(head == null) return 0;
        res += getDecimalValue(head.next) + head.val * Math.pow(2, count);
        count++;
        return (int)res;
    }
}
```

方法四：栈

* 

```
class Solution {
    public int getDecimalValue(ListNode head) {
        Stack<Integer> stack = new Stack<>();
        while(head != null){
            stack.push(head.val);
            head = head.next;
        }
        int n = 0;
        int res = 0;
        while(!stack.empty()){
            res += stack.pop() * Math.pow(2, n);
            n++;
        }
        return (int)res;
    }
}
```

方法五：ArrayList

* 

```
class Solution {
    public int getDecimalValue(ListNode head) {
        List<Integer> list = new ArrayList<>();
        while(head != null){
            list.add(head.val);
            head = head.next;
        }
        int n = 0;
        int res = 0;
        for(int i = list.size()-1; i >= 0; i--){
            res += list.get(i) * Math.pow(2, n);
            n++;
        }
        return (int)res;
    }
}
```

方法六：比较原始的做法，先得出总长度，再从最低位恢复出十进制

* 

```
class Solution {
    public int getDecimalValue(ListNode head) {
        int count = 0;
        int res = 0;
        ListNode p = head;
        while(p != null){
            count++;
            p = p.next;
        }
        while(head != null){
            res += head.val * Math.pow(2, count - 1);
            head = head.next;
            count--;
        }
        return (int)res;
    }
}
```

方法七：转化为字符串，再采用valueOf

* 

```
class Solution {
    public int getDecimalValue(ListNode head) {
        StringBuilder sb = new StringBuilder();
        while(head != null){
            sb.append(head.val);
            head = head.next;
        }
        return Integer.valueOf(sb.toString(), 2);
    }
}
```

