## 模拟 + 进制转换

首先，我们可以利用通用的进制转换思路来做，不断循环 `num % k` 和 `num / k` 的操作来构造出 $k$ 进制每一位。

但需要处理「补码」问题：对于负数的 $num$，我们需要先在 $num$ 基础上加上 $2^{32}$ 的偏移量，再进行进制转换。

代码：

* []

```Java
class Solution {
    public String toHex(int _num) {
        if (_num == 0) return "0";
        long num = _num;
        StringBuilder sb = new StringBuilder();
        if(num < 0) num = (long)(Math.pow(2, 32) + num);
        while (num != 0) {
            long u = num % 16;
            char c = (char)(u + '0');
            if (u >= 10) c = (char)(u - 10 + 'a');
            sb.append(c);
            num /= 16;
        }
        return sb.reverse().toString();
    }
}
```

* 时间复杂度：复杂度取决于构造的十六进制数的长度，固定为 $C = 8$。整体复杂度为 $O(C)$
* 空间复杂度：复杂度取决于构造的十六进制数的长度，固定为 $C = 8$。整体复杂度为 $O(C)$

---

## 位运算 + 分组换算

将长度为 $32$ 的二进制转换为 $16$ 进制数，本质是对长度为 $32$ 的二进制数进行分组，每 $4$ 个一组（二进制 $(1111)_2$ 表示 $15$，则使用长度为 $4$ 的二进制可以表示 `0-15`）。

同时，由于我们是直接对长度为 $32$ 的二进制进行分组转算（$4$ 个为一组，共 $8$ 组），而长度为 $32$ 的二进制本身就是使用补码规则来表示的，因此我们无须额外处理「补码」问题。

具体的，我们将 $num$ 与 $15$ = $(1111)_2$ 进行 `&` 运算，然后对 $num$ 进行无符号右移 $4$ 位来实现每 $4$ 位处理。

代码：

* []

```Java
class Solution {
    public String toHex(int num) {
        if (num == 0) return "0";
        StringBuilder sb = new StringBuilder();
        while (num != 0) {
            int u = num & 15;
            char c = (char)(u + '0');
            if (u >= 10) c = (char)(u - 10 + 'a');
            sb.append(c);
            num >>>= 4;
        }
        return sb.reverse().toString();
    }
}
```

* 时间复杂度：复杂度取决于构造的十六进制数的长度，固定为 $C = 8$。整体复杂度为 $O(C)$
* 空间复杂度：复杂度取决于构造的十六进制数的长度，固定为 $C = 8$。整体复杂度为 $O(C)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
