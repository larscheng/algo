这道题和[2. 两数相加](https://leetcode-cn.com/problems/add-two-numbers/)一样，换汤不换药。
只要记住这个公式，不管两个数是列表形式，还是数组形式，都不会写错！

<**公式**>

    当前位 = (A 的当前位 + B 的当前位 + 进位carry) % 10

注意，AB两数都加完后，最后判断一下进位 carry, 进位不为 0 的话加在前面。

<**加法模板**>

    while ( A 没完 || B 没完)
        A 的当前位
        B 的当前位
    
        和 = A 的当前位 + B 的当前位 + 进位carry
    
        当前位 = 和 % 10;
        进位 = 和 / 10;
    
    判断还有进位吗

* 

```
class Solution {
    public List<Integer> addToArrayForm(int[] A, int K) {
        int n = A.length;
        List<Integer> res = new ArrayList<>();  // 可以用 LinkeList，或者 ArrayList 往后加，最后反转
        int i = n - 1, sum = 0, carry = 0;
        while (i >= 0 || K != 0) {  // 循环条件：两个数有一个没完
            int x = i >= 0 ? A[i]: 0;
            int y = K != 0 ? K % 10 : 0;
                        
            sum = x + y + carry;
            carry = sum / 10;
            K = K / 10;

            i--;
            res.add(0, sum % 10);
        }
        if (carry != 0) res.add(0, carry);
        return res;
    }
}
```

这个模板真的可以解很多题。比如 [165. 比较版本号](https://leetcode-cn.com/problems/compare-version-numbers/)

* java

```java
// 细节: split的时候，【.】在JAVA正则表达式里有特殊含义，表示"任意字符"，需要进行转义
class Solution {
    public int compareVersion(String version1, String version2) {
        String[] v1 = version1.split("\\."); 
        String[] v2 = version2.split("\\.");

        int m = v1.length, n = v2.length;
        int i = 0;
        while (i < m || i < n) {
            int a = i < m ? Integer.valueOf(v1[i]) : 0;
            int b = i < n ? Integer.valueOf(v2[i]) : 0;
            if (a == b) {
                i++;
                continue;
            }
            return Integer.compare(a, b);
        }
        return 0;
    }
}
```

还可以推广到字符串比较。比如这道谷歌高频题：[809. 情感丰富的文字](https://leetcode-cn.com/problems/expressive-words/)
<**比较模板**>

    while( A 没完 && B 没完)
        A 的当前字符
        B 的当前字符
    
        A 的当前字符长度
        B 的当前字符长度
    
        判读符合比较条件吗
    判断 A B 都走完了吗

