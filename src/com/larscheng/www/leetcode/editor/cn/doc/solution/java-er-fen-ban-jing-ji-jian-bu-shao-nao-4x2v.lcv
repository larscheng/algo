### 解题思路

①对于该题，多个加热器，多个房屋，需要计算加热半径最小值，多对多的问题，
如果想直接通过贪心求出答案很费脑子，pass
如果直接暴力判断，超时，pass
此时可想到二分枚举加热半径，根据在该半径下能加热的房屋数量来判断是否可行，然后移动左右边界使之相同即为答案
②代码及其简单，思路也不复杂，该写法超了53%但因为我的上界用的是Integer.MAX_VALUE，所以时间复杂度仍然有优化空间，
至于为什么直接上Integer.MAX_VALUE，因为周赛吃过手动计算上界的亏，说多了都是泪
有兴趣的小伙伴可以自行计算一下最大上界
③其余见注释

### 代码

* java

```java
class Solution {
    public int findRadius(int[] houses, int[] heaters) {
        //该法能成立的先决条件为两数组一定都要从小到大排好序
        Arrays.sort(heaters);
        Arrays.sort(houses);
        int l = 0 , r = Integer.MAX_VALUE;
        //开始二分枚举
        while(l < r){
            int mid = (l+r) >>> 1;
            //成立时，右界移动至中心
            if(Helper(houses , heaters , mid)){
                r = mid;
            //不成立时，左界移至中心+1
            //这样可以保证最后的跳出循环l一定为半径最小
            }else{
                l = mid+1; 
            }
        }
        return l;
    }
    public boolean Helper(int[] houses, int[] heaters, int len){
        int m = houses.length , n = heaters.length;
        int index = 0;
        for(int i = 0 ; i < n ; i++){
            long l = heaters[i]-len , r = heaters[i]+len;
            //计算能否完全覆盖房屋
            while(index < m && (long)houses[index] >= l && (long)houses[index] <= r){
                index++;
            }
            if(index == m) return true;
        }
        return false;
    }
}
```

