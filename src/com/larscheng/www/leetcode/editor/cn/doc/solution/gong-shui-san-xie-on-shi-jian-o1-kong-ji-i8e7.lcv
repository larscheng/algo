## 模拟

根据题意，平衡子字符串必然满足 `0...01...1` 格式（前半段全是 `0`，后半段全是 `1`，前后两段长度相同）。

使用变量 `idx` 对 `s` 进行遍历。在每轮处理过程中，按照如下流程进行：

1. 先统计连续段 `0` 的长度，记为 `a`；再统计连续段 `1` 的长度，记为 `b`（此操作满足：子串中 `0` 均在 `1` 前面）
2. 在 `a` 和 `b` 中取较小值，进行乘 $2$ 操作，作为当前平衡子字符串的长度，用于更新答案（此操作满足：子串中 `0` 和 `1` 数量相同）
3. 从当前轮的结束位置 `idx`，再进行下轮处理（重复步骤 $1$ 和步骤 $2$），直到 `s` 处理完成

代码：

* []

```Java
class Solution {
    public int findTheLongestBalancedSubstring(String s) {
        int n = s.length(), idx = 0, ans = 0;
        while (idx < n) {
            int a = 0, b = 0;
            while (idx < n && s.charAt(idx) == '0' && ++a >= 0) idx++;
            while (idx < n && s.charAt(idx) == '1' && ++b >= 0) idx++;
            ans = Math.max(ans, Math.min(a, b) * 2);
        }
        return ans;
    }
}
```

* []

```C++
class Solution {
public:
    int findTheLongestBalancedSubstring(string s) {
        int n = s.size(), idx = 0, ans = 0;
        while (idx < n) {
            int a = 0, b = 0;
            while (idx < n && s[idx] == '0' && ++a >= 0) idx++;
            while (idx < n && s[idx] == '1' && ++b >= 0) idx++;
            ans = max(ans, min(a, b) * 2);
        }
        return ans;
    }
};
```

* []

```Python
class Solution:
    def findTheLongestBalancedSubstring(self, s: str) -> int:
        n, idx, ans = len(s), 0, 0
        while idx < n:
            a, b = 0, 0
            while idx < n and s[idx] == '0':
                a, idx = a + 1, idx + 1
            while idx < n and s[idx] == '1':
                b, idx = b + 1, idx + 1
            ans = max(ans, min(a, b) * 2)
        return ans
```

* []

```TypeScript
function findTheLongestBalancedSubstring(s: string): number {
    let n = s.length, idx = 0, ans = 0;
    while (idx < n) {
        let a = 0, b = 0;
        while (idx < n && s[idx] == '0' && ++a >= 0) idx++;
        while (idx < n && s[idx] == '1' && ++b >= 0) idx++;
        ans = Math.max(ans, Math.min(a, b) * 2);
    }
    return ans;
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~

