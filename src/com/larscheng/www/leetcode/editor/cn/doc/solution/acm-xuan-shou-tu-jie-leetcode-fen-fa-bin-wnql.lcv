大家好呀，我是吃到打嗝都是饼干味儿的帅蛋。

从这篇文章开始，我们来正式开始贪心算法的 LeetCode 实战系列，这又是一个新的篇章，希望你做好准备啦！

今天先来一道开胃菜，解决**分发饼干**问题，咱们闲话少唠，直接开整！

![455-1.png](https://pic.leetcode.cn/1676011245-BPafwA-455-1.png)

# LeetCode 455 分发饼干

## 题意

假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

## 示例

输入：g = [1,2,3]，s = [1,1]

输出：1

解释：

你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。

虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。

所以你应该输出1。

输入：g = [1,2]，s = [1,2,3]

输出：2

解释：

你有两个孩子和三块饼干，2个孩子的胃口值分别是1，2。

你拥有的饼干数量和尺寸都足以让所有孩子满足。

所以你应该输出2。

## 提示

- 1 <= g.length <= 3 * 10^4
- 0 <= s.length <= 3 * 10^4
- 1 <= g[i]，s[j] <= 2^31 - 1

# 题目解析

这道分发饼干，是典型的用贪心算法解题，难度简单，很适合的入门题。

这道题你看着题意这么多，其实可以抽象成：**从 n 个孩子中，抽出一部分孩子给他们饼干吃，让满足孩子的个数是最大的**。

这个如何用贪心解决呢？

很简单，其实你可以这么想，因为要求满足孩子的个数是最大的，那对于一个孩子来说，如果小尺寸的饼干可以满足，就没必要用大尺寸的饼干，这样我们就可以把相对大尺寸的饼干留给胃口更大的孩子。

小尺寸的饼干能满足小胃口的孩子满足不了大胃口的孩子，大尺寸的饼干能满足大胃口的孩子也能满足小胃口的孩子，因为对于我们来说，**满足一个胃口小的孩子和满足一个胃口大的孩子的期望值是一样的**，那就应该小尺寸的饼干用来满足小胃口的孩子，大尺寸的饼干来满足大胃口的孩子。

这就套路就成了：**我们每次从剩下的孩子中，找出胃口最小的孩子，给他能满足他胃口的最小尺寸饼干即可，这样我们得到的分配方案，是满足孩子的个数最大的**。

![455-2.jpg](https://pic.leetcode.cn/1676011253-KaRnYi-455-2.jpg)

# 图解

我们以 g = [10,9,8,7]，s = [5,6,7,8] 为例。

![455-3.png](https://pic.leetcode.cn/1676011261-PqYSaJ-455-3.png)

首先就是分别对 g 和 s 排序，目的就是为了从左到右遍历的时候，都是按照从小到大遍历。

![455-4.png](https://pic.leetcode.cn/1676011265-vQRtOa-455-4.png)

* Python

```Python
g.sort()
s.sort()
```

之后对于每一步，从左到右遍历 s，依次拿着饼干去喂孩子，直到找到满足孩子胃口的最小尺寸饼干。

![455-5.png](https://pic.leetcode.cn/1676011276-CyXvom-455-5.png)

* Python

```Python
for i in range(m):
    # 从胃口小的开始喂
    if res < n and g[res] <= s[i]:
        res += 1
```

结果 res + 1，继续找满足下一个孩子胃口的最小尺寸饼干，直至遍历完，返回结果。

![455-6.png](https://pic.leetcode.cn/1676011282-rZYyem-455-6.png)

假设 g 数组长度为 n，s 数组长度为 m，本题解分别对 g 和 s 进行快速排序，所以分别的时间复杂度为 O(nlogn) 和 O(mlogm)，同时分别对 g 和 s 进行遍历，分别的时间复杂度为 O(n) 和 O(m)，因为不知道两个数组长度的大小，所以最终的**时间复杂度为 O(max(nlogn, mlogm))**。

对于空间复杂度，因为使用快速排序的缘故使用了额外的空间，所以**空间复杂度为 O(max(logn, logm))**。

# 代码实现

## Python 代码实现

* Python

```Python
class Solution:
    def findContentChildren(self, g: List[int], s: List[int]) -> int:
        # 将胃口和饼干排序
        g.sort()
        s.sort()
        # 孩子的数量
        n = len(g)
        # 饼干的数量
        m = len(s)
        # 记录结果
        res = 0 
        for i in range(m):
            # 从胃口小的开始喂
            if res < n and g[res] <= s[i]:
                res += 1
        return res
```

## Java 代码实现

* Java

```Java
class Solution {
    public int findContentChildren(int[] g, int[] s) {
        // 将胃口和饼干排序
        Arrays.sort(g);
        Arrays.sort(s);
        // 孩子的数量
        int n = g.length;
        // 饼干的数量
        int m = s.length;
        // 记录结果
        int res = 0;
        for(int i = 0; i < m; i++){
            // 从胃口小的开始喂
            if(res < n && g[res] <= s[i]){
                res += 1;
            }
        }
        return res;
    }
}

```

---

**图解分发饼干**到这就结束辣，作为贪心算法的开篇题这只能算是一道开胃小菜给大家找找感觉。

还是那句话，大家不要去强背这种的解题思路，没用，贪心策略还是会有差别的，这个需要我们多做题就能慢慢来感觉，见多必定能识广，大家加油。

![455-7.png](https://pic.leetcode.cn/1676011290-AcpIpm-455-7.png)

## 写在最后

**如果你觉得有帮助到你，请给题解点个赞和收藏，让更多的人看到呀**

也欢迎你点击[**关注我**](https://cdn.codegoudan.com/img/gzgzhbcwqlgd0-1.png)，解锁更多图解 LeetCode，一起玩转数据结构与算法！

我是帅蛋，我们下次见！

<br />

[**推荐阅读** 👍：ACM 选手带你玩转贪心算法](https://mp.weixin.qq.com/s/6ivG5imcMXHBZiQxofvxeg)

[**推荐阅读** 👍：ACM 选手带你玩转二叉树](https://mp.weixin.qq.com/s/l8jwYfaUuV5ZjFH8CMNw9A)

[**推荐阅读** 👍：ACM 选手带你玩转平衡二叉树](https://mp.weixin.qq.com/s/v6gA1gUnURadjr5yOIiVGQ)

[**推荐阅读** 👍：ACM 选手带你玩转二叉搜索树](https://mp.weixin.qq.com/s/DsWb4oXeOWsCRiuPRwJysg)

[**推荐阅读** 👍：ACM 选手带你玩转二叉树层次遍历](https://mp.weixin.qq.com/s/3MMgFtLW9BHpguUkHICLkQ)

[**推荐阅读** 👍：ACM 选手带你玩转二叉树前中后序遍历](https://mp.weixin.qq.com/s/8O7cIqyU6Ecpcq3Nj_e_0Q)

[**推荐阅读** 👍：ACM 选手带你玩转时间复杂度和空间复杂度](https://mp.weixin.qq.com/s/Q3LUNACtC8G-x4EMtPGRHA)
