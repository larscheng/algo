> Problem: [1512. 好数对的数目](https://leetcode.cn/problems/number-of-good-pairs/description/)

[TOC]

# 思路

这段代码实现了一个函数 numIdenticalPairs，它接受一个整数数组 nums 和数组的大小 numsSize 作为输入，并返回数组中具有相同值的数对的数量。

在函数中，使用了两个循环。第一个循环使用一个哈希表来计算每个数字出现的次数。第二个循环遍历哈希表中的所有项，如果该项中的数字出现了超过一次，就调用另一个函数 fun 来计算该数字可以组成的数对数量，并将结果累加到 sum 变量中。最后返回 sum 变量作为结果。

函数 fun 实现了一个递归算法，它接受一个整数 n 作为输入，并返回一个整数值。如果输入 n 等于 1，函数返回 0；否则，函数返回 (n-1) 加上调用 fun(n-1) 的结果。这个递归算法的基本思路是，在一个长度为 n 的序列中选择两个数作为一对，共有 (n-1) 种选择方式，对于每种选择方式，问题可以转化为在一个长度为 (n-1) 的序列中选择一对数的数量。递归过程在每次调用时都会缩小序列的长度，直到序列长度缩小到 1 为止。

因此，这段代码的基本思路是使用哈希表统计数组中每个数字出现的次数，然后对于每个出现次数大于 1 的数字，使用函数 fun 计算可以组成的数对数量，并将结果累加到 sum 中。最后返回 sum 作为结果

# 解题方法

> 描述你的解题方法

# 复杂度

- 时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

- 空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```C

fun(int n)
{
    if(n==1)
    return 0;
    else
    return (n-1)+fun(n-1);
}



int numIdenticalPairs(int* nums, int numsSize){
 int hash[101]={0};
for(int i=0;i<numsSize;i++)
    {
        hash[nums[i]]++;
    }
   int sum=0;
   for(int i=0;i<101;i++)
   {
       if(hash[i]>1)
       {
           sum+=fun(hash[i]);
       }
   }
   return sum;
}
```

