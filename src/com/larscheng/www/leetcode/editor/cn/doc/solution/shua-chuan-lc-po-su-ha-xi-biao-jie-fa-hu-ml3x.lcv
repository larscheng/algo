## 朴素哈希表

令 `n` 为字符串 `s` 的长度，`m` 为数组 `words` 的长度（单词的个数），`w` 为单个单词的长度。

由于 `words` 里面每个单词长度固定，而我们要找的字符串只能恰好包含所有的单词，因此我们要找的目标子串的长度为 $m \times w$。

那么一个直观的思路是：

1. 使用哈希表 `map` 记录 `words` 中每个单词的出现次数
2. 枚举 `s` 中的每个字符作为起点，往后取得长度为 $m \times w$ 的子串 `sub`
3. 使用哈希表 `cur ` 统计 `sub` 每个单词的出现次数（每隔 `w` 长度作为一个单词）
4. 比较 `cur` 和 `map` 是否相同

注意：在步骤 $3$ 中，如果发现 `sub` 中包含了 `words` 没有出现的单词，可以直接剪枝。

剪枝处使用了带标签的 `continue` 语句直接回到外层循环进行。

代码：

* []

```Java
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        int n = s.length(), m = words.length, w = words[0].length();
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) map.put(word, map.getOrDefault(word, 0) + 1);
        List<Integer> ans = new ArrayList<>();
        out:for (int i = 0; i + m * w <= n; i++) {
            Map<String, Integer> cur = new HashMap<>();
            String sub = s.substring(i, i + m * w);
            for (int j = 0; j < sub.length(); j += w) {
                String item = sub.substring(j, j + w);
                if (!map.containsKey(item)) continue out;
                cur.put(item, cur.getOrDefault(item, 0) + 1);
            }
            if (cur.equals(map)) ans.add(i);
        }
        return ans;
    }

}
```

* 时间复杂度：将 `words` 中的单词存入哈希表，复杂度为 $O(m)$；然后第一层循环枚举 `s` 中的每个字符作为起点，复杂度为 $O(n)$；在循环中将 `sub` 划分为 `m` 个单词进行统计，枚举了 `m - 1` 个下标，复杂度为 $O(m)$；每个字符串的长度为 `w`。整体复杂度为 $O(n \times m \times w)$
* 空间复杂度：$O(m \times w)$

---

## 滑动窗口 & 哈希表

事实上，我们可以**优化这个枚举起点的过程**。

我们可以将起点根据 **当前下标与单词长度的取余结果** 进行分类，这样我们就不用频繁的建立新的哈希表和进行单词统计。

代码：

* []

```Java
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        int n = s.length(), m = words.length, w = words[0].length();
        // 统计 words 中「每个目标单词」的出现次数
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) map.put(word, map.getOrDefault(word, 0) + 1);
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < w; i++) {
            // 构建一个当前子串对应 map，统计当前子串中「每个目标单词」的出现次数
            Map<String, Integer> curMap = new HashMap<>();
            // 滑动窗口的大小固定是 m * w
            // 每次将下一个单词添加进 cur，上一个单词移出 cur
            for (int j = i; j + w <= n; j += w) {   
                String cur = s.substring(j, j + w);
                if (j >= i + (m * w)) {
                    int idx = j - m * w;
                    String prev = s.substring(idx, idx + w);
                    if (curMap.get(prev) == 1) curMap.remove(prev);    
                    else curMap.put(prev, curMap.get(prev) - 1);
                }
                curMap.put(cur, curMap.getOrDefault(cur, 0) + 1);
                // 如果当前子串对应 map 和 words 中对应的 map 相同，说明当前子串包含了「所有的目标单词」，将起始下标假如结果集
                if (map.containsKey(cur) && curMap.get(cur).equals(map.get(cur)) && curMap.equals(map)) {
                    ans.add(j - (m - 1) * w);
                }
            }
        }
        return ans;
    }
}
```

* 时间复杂度：将 `words` 中的单词存入哈希表，复杂度为 $O(m)$；然后枚举了取余的结果，复杂度为 $O(w)$；每次循环最多处理 `n` 长度的字符串，复杂度为 $O(n)$。整体复杂度为 $O(m + w \times n)$
* 空间复杂度：$O(m \times w)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
