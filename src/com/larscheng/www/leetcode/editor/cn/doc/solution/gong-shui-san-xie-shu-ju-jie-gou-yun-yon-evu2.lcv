## 哈希表

数据范围为 $500$，三层循环的朴素做法显然会 TLE。

对于每个回旋镖三元组而言，本质上我们在统计给定 $i$ 的情况下，与 $i$ 距离相等的 $(j, k)$ 组合个数为多少。

我们可以使用哈希表进行预处理，在统计以 $i$ 为三元组第一位的回旋镖个数前，先计算出 $i$ 和其余点的距离，并以 `{ 距离 : 个数 }` 的形式进行存储，然后分别对所有的距离进行累加计数。

在计算距离时为了避免使用 `sqrt`，我们直接使用 $x^2 + y^2$ 来代指两点间的距离。

代码：

* Java

```Java
class Solution {
    public int numberOfBoomerangs(int[][] points) {
        int n = points.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            Map<Integer, Integer> map = new HashMap<>();
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int x = points[i][0] - points[j][0], y = points[i][1] - points[j][1];
                int dist = x * x + y * y;
                map.put(dist, map.getOrDefault(dist, 0) + 1);
            }
            for (int dist : map.keySet()) {
                int cnt = map.get(dist);
                ans += cnt * (cnt - 1);
            }
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n^2)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
