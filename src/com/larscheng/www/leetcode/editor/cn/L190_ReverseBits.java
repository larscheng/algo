//颠倒给定的 32 位无符号整数的二进制位。 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
// 
// 
//
// 
//
// 示例 1： 
//
// 
//输入：n = 00000010100101000001111010011100
//输出：964176192 (00111001011110000010100101000000)
//解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。 
//
// 示例 2： 
//
// 
//输入：n = 11111111111111111111111111111101
//输出：3221225471 (10111111111111111111111111111111)
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。 
//
// 
//
// 提示： 
//
// 
// 输入是一个长度为 32 的二进制字符串 
// 
//
// 
//
// 进阶: 如果多次调用这个函数，你将如何优化你的算法？ 
//
// Related Topics 位运算 分治 👍 661 👎 0

package com.larscheng.www.leetcode.editor.cn;


public class L190_ReverseBits{
      
  public static void main(String[] args) {
       Solution solution = new L190_ReverseBits().new Solution();
  }

//leetcode submit region begin(Prohibit modification and deletion)
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        /**
         * Example：当num=10(1010)，按位与1获得最低位数字值（num&1），该数字左移32-i位，左移后的值同result按位或运算，将该位数值实现颠倒位置，num右移1位进行下一轮
         * //i=31，num&1 1010 & 0001 = 0000  num<<31，左移31位=0000 0000 0000 0000 , 与result 按位或= 0100 0000 0000 0000  num右移1位 0101
         * //i=30，num&1 0101 & 0001 = 0001  num<<30，左移30位=0100 0000 0000 0000 , 与result 按位或= 0100 0000 0000 0000  num右移1位 0010
         * //i=29，num&1 0010 & 0001 = 0000  num<<29，左移29位=0000 0000 0000 0000 , 与result 按位或= 0100 0000 0000 0000  num右移1位 0001
         * //i=28，num&1 0001 & 0001 = 0001  num<<28，左移28位=0001 0000 0000 0000 , 与result 按位或= 0101 0000 0000 0000  num右移1位 0000
         * ……
         */
        int result = 0;
        for (int i = 31; i >= 0; i--) {
            result = result | ((n & 1) << i);
            n >>= 1;
        }
        return result;
    }
}
//leetcode submit region end(Prohibit modification and deletion)


}